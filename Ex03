Files to turn in : Makefile, and files needed for your program
Allowed functions : close, open, read, write, malloc, free, strerror,
basename

• Create a program called ft_hexdump which does the same thing as the system’s
hexdump command-line without redirection.
• The only option you have to handle is -C.
• The submission directory should have a Makefile with the following rules : all,
clean, fclean.
• You may use the variable errno.

Here's an example Makefile for the `ft_hexdump` program:

```makefile
NAME = ft_hexdump
SRC = ft_hexdump.c
OBJ = $(SRC:.c=.o)
CC = gcc
CFLAGS = -Wall -Wextra -Werror

all: $(NAME)

$(NAME): $(OBJ)
	$(CC) $(CFLAGS) -o $@ $^

clean:
	rm -f $(OBJ)

fclean: clean
	rm -f $(NAME)

re: fclean all

.PHONY: all clean fclean re
```

You can use this Makefile to compile the `ft_hexdump` program. It assumes that you have a source file named `ft_hexdump.c`. Adjust the file name if necessary.

Here's an example implementation of the `ft_hexdump` program:

```c
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <libgen.h>

#define BUFFER_SIZE 16

void display_error(char *filename)
{
    char *base = basename(filename);
    char *error = strerror(errno);
    write(2, base, strlen(base));
    write(2, ": ", 2);
    write(2, error, strlen(error));
    write(2, "\n", 1);
}

void print_hex(char c)
{
    const char *hex_digits = "0123456789abcdef";
    write(1, &hex_digits[(c >> 4) & 0xF], 1);
    write(1, &hex_digits[c & 0xF], 1);
}

void print_ascii(char c)
{
    if (c >= 32 && c <= 126)
        write(1, &c, 1);
    else
        write(1, ".", 1);
}

void display_hexdump(char *filename)
{
    int fd;
    char buffer[BUFFER_SIZE];
    ssize_t bytes_read;
    size_t offset = 0;

    fd = open(filename, O_RDONLY);
    if (fd == -1)
    {
        display_error(filename);
        return;
    }

    while ((bytes_read = read(fd, buffer, BUFFER_SIZE)) > 0)
    {
        size_t i;
        size_t remaining = bytes_read;

        printf("%08lx  ", offset);

        for (i = 0; i < BUFFER_SIZE; i++)
        {
            if (i < remaining)
            {
                print_hex(buffer[i]);
                write(1, " ", 1);
            }
            else
            {
                write(1, "   ", 3);
                write(1, " ", 1);
            }

            if (i == 7)
                write(1, " ", 1);
        }

        for (i = 0; i < bytes_read; i++)
        {
            print_ascii(buffer[i]);
        }

        write(1, "\n", 1);

        offset += bytes_read;
    }

    if (bytes_read == -1)
    {
        display_error(filename);
    }

    close(fd);
}

int main(int argc, char *argv[])
{
    if (argc != 2)
    {
        display_error("Usage: ft_hexdump file");
        return 1;
    }

    display_hexdump(argv[1]);

    return 0;
}
```

This program emulates the behavior of the `hexdump` command-line utility with the `-C` option. It reads the specified file and displays the hexadecimal and ASCII representation of the file's contents. The program uses the `open`, `read`, `write`, and `close` functions to handle file I/O, and the

 `malloc`, `free`, `strerror`, and `basename` functions as allowed.

To compile the program, place the Makefile and the `ft_hexdump.c` file in the same directory and run the `make` command. This will generate the `ft_hexdump` binary.
