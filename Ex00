Files to turn in : Makefile, and files needed for your program
Allowed functions : close, open, read, write

• Create a program called ft_display_file that displays, on the standard output,
only the content of the file given as argument.
• The submission directory should have a Makefile with the following rules : all,
clean, fclean. The binary will be called ft_display_file.
• The malloc function is forbidden. You can only do this exercise by declaring a
fixed-sized array.
• All files given as arguments will be valid.
• Error messages have to be displayed on their reserved output followed by a new
line.
• If no argument is given, it should display
File name missing.
• If there is more than one argument, it should display
Too many arguments.
• If the file cannot be read, it should display
Cannot read file.

Here's an example Makefile for the `ft_display_file` program:

```makefile
NAME = ft_display_file
SRC = ft_display_file.c
OBJ = $(SRC:.c=.o)
CC = gcc
CFLAGS = -Wall -Wextra -Werror

all: $(NAME)

$(NAME): $(OBJ)
	$(CC) $(CFLAGS) -o $@ $^

clean:
	rm -f $(OBJ)

fclean: clean
	rm -f $(NAME)

re: fclean all

.PHONY: all clean fclean re
```

You can use this Makefile to compile the `ft_display_file` program. It assumes that you have a source file named `ft_display_file.c`. Adjust the file name if necessary.

Here's an example implementation of the `ft_display_file` program:

```c
#include <fcntl.h>
#include <unistd.h>

#define BUFFER_SIZE 4096

void ft_putstr(char *str)
{
    while (*str)
        write(1, str++, 1);
}

void display_file(char *filename)
{
    int fd;
    char buffer[BUFFER_SIZE];
    ssize_t bytes_read;

    fd = open(filename, O_RDONLY);
    if (fd == -1)
    {
        ft_putstr("Cannot read file.\n");
        return;
    }

    while ((bytes_read = read(fd, buffer, BUFFER_SIZE)) > 0)
    {
        write(1, buffer, bytes_read);
    }

    if (bytes_read == -1)
    {
        ft_putstr("Cannot read file.\n");
    }

    close(fd);
}

int main(int argc, char *argv[])
{
    if (argc < 2)
    {
        ft_putstr("File name missing.\n");
        return 1;
    }
    else if (argc > 2)
    {
        ft_putstr("Too many arguments.\n");
        return 1;
    }

    display_file(argv[1]);

    return 0;
}
```

This program uses the `open`, `read`, `write`, and `close` functions to display the content of a file given as an argument. It checks for errors when opening and reading the file and displays the appropriate error messages.

To compile the program, navigate to the directory containing the Makefile and run the command `make`. This will generate the `ft_display_file` binary. Use `make clean` to remove the object files, `make fclean` to remove the object files and the binary, and `make re` to clean and recompile the program.

Make sure to adjust the code and the Makefile according to your needs and specifications.
